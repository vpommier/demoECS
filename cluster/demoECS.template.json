{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Parameters" : {
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the ECS instances"
    },
    "DesiredCapacity": {
      "Type": "Number",
      "Default" : "1",
      "Description": "Number of instances to launch in your ECS cluster"
    },    
    "MaxSize": {
      "Type": "Number",
      "Default" : "1",
      "Description": "Maximum number of instances that can be launched in your ECS cluster"
    },
    "InstanceType" : {
      "Description" : "The EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "m3.medium" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    }
  },

  "Mappings" : {
    "AWSRegionToAMI" : {
      "us-east-1"      : { "AMIID" : "ami-5f59ac34" }
    }
  },

  "Resources" : {
    "ECSClusterDemo": {
      "Type": "AWS::ECS::Cluster"
    },    
    "fakeApp": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties" : {
        "ContainerDefinitions" : [
          {
            "Name": "fake-app",
            "Cpu": "10",
            "Memory":"300",
            "Essential": "true",
            "Image":"vpommier/fake-app:latest",
            "PortMappings": [
              { "HostPort": 80, "ContainerPort": 8080 }
            ]
          }
        ]
      }
    },
    "ECSDemoVPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "192.168.56.0/24",
	"Tags" : [ {"Key" : "Name", "Value" : "ECSDemoVPC"} ]
      }
    },
    "ECSDemoSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "DependsOn" : ["myRoute"],
      "Properties" : {
        "VpcId" : { "Ref" : "ECSDemoVPC" },
        "CidrBlock" : "192.168.56.0/24",
	"MapPublicIpOnLaunch" : true,
	"Tags" : [ {"Key" : "Name", "Value" : "ECSDemoSubnet"} ]
      }
    },
    "myRouteTable" : {
       "Type" : "AWS::EC2::RouteTable",
       "Properties" : {
	  "VpcId" : { "Ref" : "ECSDemoVPC" }
       }
    },
    "myInternetGateway" : {
       "Type" : "AWS::EC2::InternetGateway"
    },
    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "ECSDemoVPC" },
         "InternetGatewayId" : { "Ref" : "myInternetGateway" }
       }
    },
    "myRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : ["AttachGateway"],
      "Properties" : {
	"RouteTableId" : { "Ref" : "myRouteTable" },
	"DestinationCidrBlock" : "0.0.0.0/0",
	"GatewayId" : { "Ref" : "myInternetGateway" }
      }
    },
    "routeTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn" : ["ECSDemoSubnet"],
      "Properties" : {
        "SubnetId" : { "Ref" : "ECSDemoSubnet" },
        "RouteTableId" : { "Ref" : "myRouteTable" }
      }
    },
    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Allow http to client host",
        "VpcId" : {"Ref" : "ECSDemoVPC"},
        "SecurityGroupIngress" : [
	   {
              "IpProtocol" : "tcp",
              "FromPort" : "80",
              "ToPort" : "80",
              "CidrIp" : "0.0.0.0/0"
           }
	]
      }
    },
    "frontEndELB" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn": ["routeTableAssociation"],
      "Properties" : {
	"SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],      
        "Subnets" : [ { "Ref" : "ECSDemoSubnet" } ],
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : "80",
          "Protocol" : "HTTP"
        } ],
        "HealthCheck" : {
          "Target" : "HTTP:80/",
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "10",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
    },    
    "ECSAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": ["routeTableAssociation"],
      "Properties" : {
        "VPCZoneIdentifier" : [ { "Ref" : "ECSDemoSubnet" } ],
        "LaunchConfigurationName" : { "Ref" : "ContainerInstances" },
        "MinSize" : "1",
        "MaxSize" : { "Ref" : "MaxSize" },
        "DesiredCapacity" : { "Ref" : "DesiredCapacity" }
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },    
    "ContainerInstances": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
          
            "commands" : {
              "01_add_instance_to_cluster" : {
                "command" : { "Fn::Join": [ "", [ "#!/bin/bash\n", "echo ECS_CLUSTER=", { "Ref": "ECSClusterDemo" }, " >> /etc/ecs/ecs.config" ] ] }
              }
            },
            
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource ContainerInstances ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },

            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true", "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionToAMI", { "Ref" : "AWS::Region" }, "AMIID" ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "IamInstanceProfile": { "Ref": "EC2InstanceProfile" },
        "KeyName"        : { "Ref" : "KeyName" },
	"SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],      
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "yum install -y aws-cfn-bootstrap\n",

             "/opt/aws/bin/cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource ContainerInstances ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "/opt/aws/bin/cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource ECSAutoScalingGroup ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    },    
    "service": {
      "Type": "AWS::ECS::Service",
      "DependsOn": ["ECSAutoScalingGroup"],
      "Properties" : {
        "Cluster": {"Ref": "ECSClusterDemo"},
        "DesiredCount": { "Ref": "DesiredCapacity" },
        "LoadBalancers": [
          {
            "ContainerName": "fake-app",
            "ContainerPort": "8080",
            "LoadBalancerName" : { "Ref" : "frontEndELB" }
          }
        ],
        "Role" : {"Ref":"ECSServiceRole"},
        "TaskDefinition" : {"Ref":"fakeApp"}
      }
    },    
    "ECSServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },    
    "EC2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:CreateLaunchConfiguration",
                    "ecs:CreateCluster",
                    "ecs:RegisterContainerInstance",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Submit*",
                    "ecs:Poll"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },    
    "EC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "EC2Role"
          }
        ]
      }
    }
  },
  
  "Outputs" : {
    "BackupLoadBalancerDNSName" : {
      "Description": "The DNSName of the frontEnd load balancer",  
      "Value" : { "Fn::GetAtt" : [ "frontEndELB", "DNSName" ]}
    }
  }
}
